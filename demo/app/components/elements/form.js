System.register(["@angular/core", "@angular/common", "ng-semantic", "../../prismjs/prismjs"], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, common_1, ng_semantic_1, prismjs_1;
    var FormComponent;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
            },
            function (ng_semantic_1_1) {
                ng_semantic_1 = ng_semantic_1_1;
            },
            function (prismjs_1_1) {
                prismjs_1 = prismjs_1_1;
            }],
        execute: function() {
            FormComponent = (function () {
                function FormComponent(fb) {
                    this.agreeControl = new common_1.Control("", common_1.Validators.required);
                    this.emailControl = new common_1.Control("", common_1.Validators.compose([common_1.Validators.required, common_1.Validators.minLength(4)]));
                    this.formSubmited = false;
                    this.nameControl = new common_1.Control("", common_1.Validators.compose([common_1.Validators.required, common_1.Validators.minLength(4)]));
                    this.nameFControl = new common_1.Control("", common_1.Validators.compose([common_1.Validators.required, common_1.Validators.minLength(4)]));
                    this.textControl = new common_1.Control("", common_1.Validators.compose([common_1.Validators.required, common_1.Validators.minLength(10)]));
                    this.form = fb.group({
                        emailControl: this.emailControl,
                        nameControl: this.nameControl,
                    });
                    this.formFeedback = fb.group({
                        nameFControl: this.nameFControl,
                        textControl: this.textControl
                    });
                }
                FormComponent.prototype.checkboxValidator = function (control) {
                    var value = (typeof control.value === "boolean") ? control.value : false;
                    return (value) ? "" : "yes";
                };
                FormComponent.prototype.submit = function () {
                    this.formSubmited = true;
                };
                FormComponent = __decorate([
                    core_1.Component({
                        directives: [ng_semantic_1.SEMANTIC_COMPONENTS, ng_semantic_1.SEMANTIC_DIRECTIVES, prismjs_1.CodeblockComponent, prismjs_1.PrismJsDirective],
                        selector: "test-form",
                        template: "\n\t<div class=\"ui masthead vertical segment\">\n    <div class=\"ui container\">\n\t<h1>Form</h1>\n\t<p>Semantic UI Form collection <i class=\"icon external\"></i>\n\t<a href=\"http://semantic-ui.com/collections/form.html\" target=\"_blank\">Semantic UI Form</a></p>\n    </div>\n</div>\n<div class=\"main ui container\">\n    <h4 class=\"ui header\">Demo login</h4>\n    <form smForm class=\"ui form\" [ngFormModel]=\"form\">\n\t<sm-loader [complete]=\"!formSubmited\" class=\"inverted\" text=\"Loading...\"></sm-loader>\n\t<div class=\"field\">\n\t    <sm-input label=\"Name\" [control]=\"nameControl\" placeholder=\"Enter name...\"></sm-input>\n\t</div>\n\t<div class=\"field\">\n\t    <sm-input label=\"E-mail\" [control]=\"emailControl\" placeholder=\"Enter e-mail...\"></sm-input>\n\t</div>\n\t<div class=\"field\">\n\t    <sm-checkbox label=\"I agree to the Terms and Conditions\" [control]=\"agreeControl\"></sm-checkbox>\n\t</div>\n\t<sm-button (click)=\"submit()\" [disabled]=\"!form.valid\" class=\"primary\">Login</sm-button>\n    </form>\n    <h4 class=\"ui header\">Code</h4>\n<codeblock prismjs=\"html\">\n&lt;form smForm class=\"ui form\" [ngFormModel]=\"form\">\n    &lt;sm-loader [complete]=\"!formSubmited\" class=\"inverted\" text=\"Loading...\">&lt;/sm-loader>\n    &lt;div class=\"field\">\n\t    &lt;sm-input label=\"Name\" [control]=\"nameControl\" placeholder=\"Enter name...\">&lt;/sm-input>\n    &lt;/div>\n    &lt;div class=\"field\">\n\t    &lt;sm-input label=\"E-mail\" [control]=\"emailControl\" placeholder=\"Enter e-mail...\">&lt;/sm-input>\n    &lt;/div>\n    &lt;div class=\"field\">\n\t    &lt;sm-checkbox label=\"I agree to the Terms and Conditions\" [control]=\"agreeControl\">&lt;/sm-checkbox>\n    &lt;/div>\n    &lt;sm-button (click)=\"submit()\" [disabled]=\"!form.valid\" class=\"primary\">Login&lt;/sm-button>\n&lt;/form>\n</codeblock>\n\n<h4 class=\"ui header\">Demo feedback</h4>\n<form smForm class=\"ui form\" [ngFormModel]=\"formFeedback\">\n    <div class=\"field\">\n        <sm-input label=\"Name\" [control]=\"nameFControl\" placeholder=\"Enter name...\"></sm-input>\n    </div>\n    <div class=\"field\">\n        <sm-textarea label=\"Name\" rows=\"10\" [control]=\"textControl\"></sm-textarea>\n    </div>\n    <sm-button (click)=\"send()\" class=\"primary\">Send</sm-button>\n</form>\n</div>\n"
                    }), 
                    __metadata('design:paramtypes', [common_1.FormBuilder])
                ], FormComponent);
                return FormComponent;
            }());
            exports_1("FormComponent", FormComponent);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUE2REE7Z0JBWUksdUJBQVksRUFBZTtvQkFYM0IsaUJBQVksR0FBWSxJQUFJLGdCQUFPLENBQUMsRUFBRSxFQUFFLG1CQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzdELGlCQUFZLEdBQVksSUFBSSxnQkFBTyxDQUFDLEVBQUUsRUFBRSxtQkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLG1CQUFVLENBQUMsUUFBUSxFQUFFLG1CQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUk1RyxpQkFBWSxHQUFZLEtBQUssQ0FBQztvQkFDOUIsZ0JBQVcsR0FBWSxJQUFJLGdCQUFPLENBQUMsRUFBRSxFQUFFLG1CQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsbUJBQVUsQ0FBQyxRQUFRLEVBQUUsbUJBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRTNHLGlCQUFZLEdBQVksSUFBSSxnQkFBTyxDQUFDLEVBQUUsRUFBRSxtQkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLG1CQUFVLENBQUMsUUFBUSxFQUFFLG1CQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1RyxnQkFBVyxHQUFZLElBQUksZ0JBQU8sQ0FBQyxFQUFFLEVBQUUsbUJBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxtQkFBVSxDQUFDLFFBQVEsRUFBRSxtQkFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFHL0csSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO3dCQUNqQixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7d0JBQy9CLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztxQkFDaEMsQ0FBQyxDQUFDO29CQUVILElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQzt3QkFDekIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO3dCQUMvQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7cUJBQ2hDLENBQUMsQ0FBQztnQkFDQSxDQUFDO2dCQUVELHlDQUFpQixHQUFqQixVQUFrQixPQUFnQjtvQkFDakMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxPQUFPLE9BQU8sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7b0JBQ3pFLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQzdCLENBQUM7Z0JBRUQsOEJBQU0sR0FBTjtvQkFDQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztnQkFDMUIsQ0FBQztnQkF2Rkw7b0JBQUMsZ0JBQVMsQ0FBQzt3QkFDUCxVQUFVLEVBQUUsQ0FBQyxpQ0FBbUIsRUFBRSxpQ0FBbUIsRUFBUSw0QkFBa0IsRUFBUSwwQkFBZ0IsQ0FBQzt3QkFDeEcsUUFBUSxFQUFFLFdBQVc7d0JBQ3JCLFFBQVEsRUFBRSxpekVBbURiO3FCQUNBLENBQUM7O2lDQUFBO2dCQWlDRixvQkFBQztZQUFELENBQUMsQUFoQ0QsSUFnQ0M7WUFoQ0QseUNBZ0NDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgLCBUeXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbnRyb2wsIFZhbGlkYXRvcnMsIENvbnRyb2xHcm91cCwgRm9ybUJ1aWxkZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBTRU1BTlRJQ19DT01QT05FTlRTLCBTRU1BTlRJQ19ESVJFQ1RJVkVTIH0gZnJvbSBcIm5nLXNlbWFudGljXCI7XG5pbXBvcnQgeyBDb2RlYmxvY2tDb21wb25lbnQsIFByaXNtSnNEaXJlY3RpdmUgfSBmcm9tIFwiLi4vLi4vcHJpc21qcy9wcmlzbWpzXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIGRpcmVjdGl2ZXM6IFtTRU1BTlRJQ19DT01QT05FTlRTLCBTRU1BTlRJQ19ESVJFQ1RJVkVTLCA8VHlwZT5Db2RlYmxvY2tDb21wb25lbnQsIDxUeXBlPlByaXNtSnNEaXJlY3RpdmVdLFxuICAgIHNlbGVjdG9yOiBcInRlc3QtZm9ybVwiLFxuICAgIHRlbXBsYXRlOiBgXG5cdDxkaXYgY2xhc3M9XCJ1aSBtYXN0aGVhZCB2ZXJ0aWNhbCBzZWdtZW50XCI+XG4gICAgPGRpdiBjbGFzcz1cInVpIGNvbnRhaW5lclwiPlxuXHQ8aDE+Rm9ybTwvaDE+XG5cdDxwPlNlbWFudGljIFVJIEZvcm0gY29sbGVjdGlvbiA8aSBjbGFzcz1cImljb24gZXh0ZXJuYWxcIj48L2k+XG5cdDxhIGhyZWY9XCJodHRwOi8vc2VtYW50aWMtdWkuY29tL2NvbGxlY3Rpb25zL2Zvcm0uaHRtbFwiIHRhcmdldD1cIl9ibGFua1wiPlNlbWFudGljIFVJIEZvcm08L2E+PC9wPlxuICAgIDwvZGl2PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwibWFpbiB1aSBjb250YWluZXJcIj5cbiAgICA8aDQgY2xhc3M9XCJ1aSBoZWFkZXJcIj5EZW1vIGxvZ2luPC9oND5cbiAgICA8Zm9ybSBzbUZvcm0gY2xhc3M9XCJ1aSBmb3JtXCIgW25nRm9ybU1vZGVsXT1cImZvcm1cIj5cblx0PHNtLWxvYWRlciBbY29tcGxldGVdPVwiIWZvcm1TdWJtaXRlZFwiIGNsYXNzPVwiaW52ZXJ0ZWRcIiB0ZXh0PVwiTG9hZGluZy4uLlwiPjwvc20tbG9hZGVyPlxuXHQ8ZGl2IGNsYXNzPVwiZmllbGRcIj5cblx0ICAgIDxzbS1pbnB1dCBsYWJlbD1cIk5hbWVcIiBbY29udHJvbF09XCJuYW1lQ29udHJvbFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgbmFtZS4uLlwiPjwvc20taW5wdXQ+XG5cdDwvZGl2PlxuXHQ8ZGl2IGNsYXNzPVwiZmllbGRcIj5cblx0ICAgIDxzbS1pbnB1dCBsYWJlbD1cIkUtbWFpbFwiIFtjb250cm9sXT1cImVtYWlsQ29udHJvbFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgZS1tYWlsLi4uXCI+PC9zbS1pbnB1dD5cblx0PC9kaXY+XG5cdDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuXHQgICAgPHNtLWNoZWNrYm94IGxhYmVsPVwiSSBhZ3JlZSB0byB0aGUgVGVybXMgYW5kIENvbmRpdGlvbnNcIiBbY29udHJvbF09XCJhZ3JlZUNvbnRyb2xcIj48L3NtLWNoZWNrYm94PlxuXHQ8L2Rpdj5cblx0PHNtLWJ1dHRvbiAoY2xpY2spPVwic3VibWl0KClcIiBbZGlzYWJsZWRdPVwiIWZvcm0udmFsaWRcIiBjbGFzcz1cInByaW1hcnlcIj5Mb2dpbjwvc20tYnV0dG9uPlxuICAgIDwvZm9ybT5cbiAgICA8aDQgY2xhc3M9XCJ1aSBoZWFkZXJcIj5Db2RlPC9oND5cbjxjb2RlYmxvY2sgcHJpc21qcz1cImh0bWxcIj5cbiZsdDtmb3JtIHNtRm9ybSBjbGFzcz1cInVpIGZvcm1cIiBbbmdGb3JtTW9kZWxdPVwiZm9ybVwiPlxuICAgICZsdDtzbS1sb2FkZXIgW2NvbXBsZXRlXT1cIiFmb3JtU3VibWl0ZWRcIiBjbGFzcz1cImludmVydGVkXCIgdGV4dD1cIkxvYWRpbmcuLi5cIj4mbHQ7L3NtLWxvYWRlcj5cbiAgICAmbHQ7ZGl2IGNsYXNzPVwiZmllbGRcIj5cblx0ICAgICZsdDtzbS1pbnB1dCBsYWJlbD1cIk5hbWVcIiBbY29udHJvbF09XCJuYW1lQ29udHJvbFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgbmFtZS4uLlwiPiZsdDsvc20taW5wdXQ+XG4gICAgJmx0Oy9kaXY+XG4gICAgJmx0O2RpdiBjbGFzcz1cImZpZWxkXCI+XG5cdCAgICAmbHQ7c20taW5wdXQgbGFiZWw9XCJFLW1haWxcIiBbY29udHJvbF09XCJlbWFpbENvbnRyb2xcIiBwbGFjZWhvbGRlcj1cIkVudGVyIGUtbWFpbC4uLlwiPiZsdDsvc20taW5wdXQ+XG4gICAgJmx0Oy9kaXY+XG4gICAgJmx0O2RpdiBjbGFzcz1cImZpZWxkXCI+XG5cdCAgICAmbHQ7c20tY2hlY2tib3ggbGFiZWw9XCJJIGFncmVlIHRvIHRoZSBUZXJtcyBhbmQgQ29uZGl0aW9uc1wiIFtjb250cm9sXT1cImFncmVlQ29udHJvbFwiPiZsdDsvc20tY2hlY2tib3g+XG4gICAgJmx0Oy9kaXY+XG4gICAgJmx0O3NtLWJ1dHRvbiAoY2xpY2spPVwic3VibWl0KClcIiBbZGlzYWJsZWRdPVwiIWZvcm0udmFsaWRcIiBjbGFzcz1cInByaW1hcnlcIj5Mb2dpbiZsdDsvc20tYnV0dG9uPlxuJmx0Oy9mb3JtPlxuPC9jb2RlYmxvY2s+XG5cbjxoNCBjbGFzcz1cInVpIGhlYWRlclwiPkRlbW8gZmVlZGJhY2s8L2g0PlxuPGZvcm0gc21Gb3JtIGNsYXNzPVwidWkgZm9ybVwiIFtuZ0Zvcm1Nb2RlbF09XCJmb3JtRmVlZGJhY2tcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZmllbGRcIj5cbiAgICAgICAgPHNtLWlucHV0IGxhYmVsPVwiTmFtZVwiIFtjb250cm9sXT1cIm5hbWVGQ29udHJvbFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgbmFtZS4uLlwiPjwvc20taW5wdXQ+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImZpZWxkXCI+XG4gICAgICAgIDxzbS10ZXh0YXJlYSBsYWJlbD1cIk5hbWVcIiByb3dzPVwiMTBcIiBbY29udHJvbF09XCJ0ZXh0Q29udHJvbFwiPjwvc20tdGV4dGFyZWE+XG4gICAgPC9kaXY+XG4gICAgPHNtLWJ1dHRvbiAoY2xpY2spPVwic2VuZCgpXCIgY2xhc3M9XCJwcmltYXJ5XCI+U2VuZDwvc20tYnV0dG9uPlxuPC9mb3JtPlxuPC9kaXY+XG5gXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1Db21wb25lbnQge1xuICAgIGFncmVlQ29udHJvbDogQ29udHJvbCA9IG5ldyBDb250cm9sKFwiXCIsIFZhbGlkYXRvcnMucmVxdWlyZWQpO1xuICAgIGVtYWlsQ29udHJvbDogQ29udHJvbCA9IG5ldyBDb250cm9sKFwiXCIsIFZhbGlkYXRvcnMuY29tcG9zZShbVmFsaWRhdG9ycy5yZXF1aXJlZCwgVmFsaWRhdG9ycy5taW5MZW5ndGgoNCldKSk7XG5cbiAgICBmb3JtOiBDb250cm9sR3JvdXA7XG4gICAgZm9ybUZlZWRiYWNrOiBDb250cm9sR3JvdXA7XG4gICAgZm9ybVN1Ym1pdGVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgbmFtZUNvbnRyb2w6IENvbnRyb2wgPSBuZXcgQ29udHJvbChcIlwiLCBWYWxpZGF0b3JzLmNvbXBvc2UoW1ZhbGlkYXRvcnMucmVxdWlyZWQsIFZhbGlkYXRvcnMubWluTGVuZ3RoKDQpXSkpO1xuXG4gICAgbmFtZUZDb250cm9sOiBDb250cm9sID0gbmV3IENvbnRyb2woXCJcIiwgVmFsaWRhdG9ycy5jb21wb3NlKFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1pbkxlbmd0aCg0KV0pKTtcbiAgICB0ZXh0Q29udHJvbDogQ29udHJvbCA9IG5ldyBDb250cm9sKFwiXCIsIFZhbGlkYXRvcnMuY29tcG9zZShbVmFsaWRhdG9ycy5yZXF1aXJlZCwgVmFsaWRhdG9ycy5taW5MZW5ndGgoMTApXSkpO1xuXG4gICAgY29uc3RydWN0b3IoZmI6IEZvcm1CdWlsZGVyKSB7XG5cdHRoaXMuZm9ybSA9IGZiLmdyb3VwKHtcblx0ICAgIGVtYWlsQ29udHJvbDogdGhpcy5lbWFpbENvbnRyb2wsXG5cdCAgICBuYW1lQ29udHJvbDogdGhpcy5uYW1lQ29udHJvbCxcblx0fSk7XG5cblx0dGhpcy5mb3JtRmVlZGJhY2sgPSBmYi5ncm91cCh7XG5cdCAgICBuYW1lRkNvbnRyb2w6IHRoaXMubmFtZUZDb250cm9sLFxuXHQgICAgdGV4dENvbnRyb2w6IHRoaXMudGV4dENvbnRyb2xcblx0fSk7XG4gICAgfVxuXG4gICAgY2hlY2tib3hWYWxpZGF0b3IoY29udHJvbDogQ29udHJvbCkge1xuXHQgICAgbGV0IHZhbHVlID0gKHR5cGVvZiBjb250cm9sLnZhbHVlID09PSBcImJvb2xlYW5cIikgPyBjb250cm9sLnZhbHVlIDogZmFsc2U7XG5cdCAgICByZXR1cm4gKHZhbHVlKSA/IFwiXCIgOiBcInllc1wiO1xuICAgIH1cblxuICAgIHN1Ym1pdCgpIHtcblx0ICAgIHRoaXMuZm9ybVN1Ym1pdGVkID0gdHJ1ZTtcbiAgICB9XG59XG4iXX0=